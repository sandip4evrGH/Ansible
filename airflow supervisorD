Let's with using supervisord to manage Airflow components. I'll assume you mean "Airflow" rather than "airlfow" (likely a typo). Here's how you can configure supervisord to start and stop Airflow components like the webserver and scheduler with parameters such as host and port:

### Basic Supervisord Configuration for Airflow

1. **Prerequisites**
   - Airflow is installed in your environment
   - Supervisord is installed (`pip install supervisor`)
   - You have appropriate permissions to run supervisord

2. **Sample supervisord.conf Configuration**
   Create or edit a `supervisord.conf` file (typically in `/etc/supervisord.conf` or a custom location). Below is an example configuration to manage Airflow webserver and scheduler with host and port parameters:

   ```ini
   [supervisord]
   logfile=/var/log/supervisord.log
   pidfile=/var/run/supervisord.pid
   childlogdir=/var/log

   ; Airflow Webserver
   [program:airflow-webserver]
   command=/path/to/airflow webserver --host 0.0.0.0 --port 8080
   directory=/path/to/airflow-home
   autostart=true
   autorestart=true
   startretries=3
   stderr_logfile=/var/log/airflow-webserver.err.log
   stdout_logfile=/var/log/airflow-webserver.out.log
   environment=AIRFLOW_HOME="/path/to/airflow-home"
   user=airflow-user
   stopsignal=TERM

   ; Airflow Scheduler
   [program:airflow-scheduler]
   command=/path/to/airflow scheduler
   directory=/path/to/airflow-home
   autostart=true
   autorestart=true
   startretries=3
   stderr_logfile=/var/log/airflow-scheduler.err.log
   stdout_logfile=/var/log/airflow-scheduler.out.log
   environment=AIRFLOW_HOME="/path/to/airflow-home"
   user=airflow-user
   stopsignal=TERM

   [supervisorctl]
   serverurl=unix:///var/run/supervisord.sock
   ```

   **Key Parameters:**
   - `--host 0.0.0.0`: Makes the webserver accessible externally (adjust as needed)
   - `--port 8080`: Specifies the port (default for Airflow webserver is 8080)
   - Replace `/path/to/airflow` with the actual path to your Airflow installation
   - Adjust `user` to the appropriate system user running Airflow
   - `environment`: Sets environment variables like `AIRFLOW_HOME`

3. **Starting Airflow Components**
   - Start supervisord with the config file:
     ```bash
     supervisord -c /path/to/supervisord.conf
     ```
   - Or if supervisord is already running, reload the config:
     ```bash
     supervisorctl reload
     ```
   - Start specific components:
     ```bash
     supervisorctl start airflow-webserver
     supervisorctl start airflow-scheduler
     ```

4. **Stopping Airflow Components**
   - Stop specific components:
     ```bash
     supervisorctl stop airflow-webserver
     supervisorctl stop airflow-scheduler
     ```
   - Stop all managed processes:
     ```bash
     supervisorctl stop all
     ```

5. **Checking Status**
   - Check the status of all managed processes:
     ```bash
     supervisorctl status
     ```

6. **Additional Parameters**
   - You can add more Airflow-specific parameters to the `command` line, e.g.:
     - Webserver: `--workers 4` (number of gunicorn workers)
     - Scheduler: `--num-runs 10` (number of runs before restarting)
   - Example with additional parameters:
     ```ini
     [program:airflow-webserver]
     command=/path/to/airflow webserver --host 0.0.0.0 --port 8080 --workers 4
     ```

### Notes
- Ensure the Airflow executable is in your PATH or use the full path (e.g., `/usr/local/bin/airflow`).
- Logs will be written to the specified `stderr_logfile` and `stdout_logfile` locations.
- If you need to customize host/port dynamically, you could use environment variables in the command:
  ```ini
  command=/path/to/airflow webserver --host %(ENV_WEB_HOST)s --port %(ENV_WEB_PORT)s
  environment=AIRFLOW_HOME="/path/to/airflow-home",WEB_HOST="0.0.0.0",WEB_PORT="8080"
  ```

Let me know if you need help with specific Airflow versions, troubleshooting, or additional components like workers!

I can help you with a structured Ansible playbook to manage PostgreSQL primary and replica nodes.
Here's a breakdown of the components you'll need, followed by example playbook snippets. Please note that this is a comprehensive example and you'll need to adapt it to your specific environment (OS, PostgreSQL version, desired replication method like streaming replication, etc.).
Assumptions:
 * Operating System: RHEL/CentOS-based (adjust package names for Debian/Ubuntu).
 * PostgreSQL Version: 16 (adjust as needed).
 * Replication Method: Streaming Replication (most common and robust).
 * User: postgres user for PostgreSQL operations.
 * SSH Access: Ansible connects via SSH to your nodes.
 * Firewall: You'll need to open port 5432 on both nodes.
Inventory (inventory.ini):
[all:vars]
ansible_user=your_ssh_user
ansible_ssh_private_key_file=~/.ssh/id_rsa # Or use ssh-agent

[postgresql]
node1 ansible_host=your_primary_ip role=primary
node2 ansible_host=your_replica_ip role=replica

Directory Structure:
.
├── inventory.ini
├── playbook.yml
├── roles/
│   ├── postgresql_install/
│   │   ├── tasks/
│   │   │   └── main.yml
│   │   │   └── configure_primary.yml
│   │   │   └── configure_replica.yml
│   │   ├── templates/
│   │   │   └── pg_hba.conf.j2
│   │   │   └── postgresql.conf.j2
│   │   │   └── recovery.conf.j2  (for older versions, otherwise use primary_conninfo in postgresql.conf)
│   │   ├── handlers/
│   │   │   └── main.yml
│   │   └── vars/
│   │       └── main.yml
│   └── postgresql_manage/
│       ├── tasks/
│       │   └── main.yml
│       │   └── backup.yml
│       │   └── failover.yml
│       ├── handlers/
│       │   └── main.yml
│       └── vars/
│           └── main.yml

Playbook (playbook.yml):
This will orchestrate the roles.
---
- name: Install and Configure PostgreSQL Primary and Replica
  hosts: postgresql
  become: yes # Run tasks with sudo
  gather_facts: yes # Gather system facts for conditional logic

  roles:
    - role: postgresql_install

- name: Manage PostgreSQL Services
  hosts: postgresql
  become: yes

  tasks:
    # Example tasks for starting/stopping/reloading (can be part of postgresql_manage role)
    - name: Start PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql-16
        state: started
        enabled: yes
      when: service_action == "start" # Pass via --extra-vars "service_action=start"

    - name: Stop PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql-16
        state: stopped
      when: service_action == "stop"

    - name: Reload PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql-16
        state: reloaded
      when: service_action == "reload"

- name: Perform PostgreSQL Backup
  hosts: postgresql
  become: yes

  tasks:
    - name: Include backup tasks if action is backup
      ansible.builtin.include_tasks: roles/postgresql_manage/tasks/backup.yml
      when: inventory_hostname == hostvars['node1']['inventory_hostname'] and action == "backup"

- name: Perform PostgreSQL Failover
  hosts: postgresql
  become: yes

  tasks:
    - name: Include failover tasks if action is failover
      ansible.builtin.include_tasks: roles/postgresql_manage/tasks/failover.yml
      when: inventory_hostname == hostvars['node1']['inventory_hostname'] and action == "failover"

Roles Details:
1. postgresql_install Role:
 * roles/postgresql_install/vars/main.yml:
   ---
pg_version: "16"
pg_data_dir: "/var/lib/pgsql/{{ pg_version }}/data"
pg_log_dir: "/var/lib/pgsql/{{ pg_version }}/logs"
pg_port: 5432
pg_replication_user: replicator
pg_replication_password: your_replication_password # CHANGE THIS!
pg_primary_ip: "{{ hostvars['node1']['ansible_host'] }}"
pg_replica_ip: "{{ hostvars['node2']['ansible_host'] }}"

 * roles/postgresql_install/tasks/main.yml (Common tasks for both primary and replica):
   ---
- name: Install PostgreSQL packages
  ansible.builtin.yum:
    name:
      - "postgresql{{ pg_version }}-server"
      - "postgresql{{ pg_version }}-contrib"
    state: present

- name: Initialize PostgreSQL database (if not already initialized)
  ansible.builtin.command: "/usr/pgsql-{{ pg_version }}/bin/postgresql-{{ pg_version }}-setup initdb"
  args:
    creates: "{{ pg_data_dir }}/PG_VERSION"

- name: Ensure PostgreSQL service is enabled
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    enabled: yes

- name: Allow PostgreSQL port in firewall (if firewalld is active)
  ansible.posix.firewalld:
    port: "{{ pg_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: yes
  when: ansible_facts.services["firewalld.service"] is defined and ansible_facts.services["firewalld.service"].state == "running"

- name: Configure primary node
  ansible.builtin.include_tasks: configure_primary.yml
  when: role == "primary"

- name: Configure replica node
  ansible.builtin.include_tasks: configure_replica.yml
  when: role == "replica"

 * roles/postgresql_install/tasks/configure_primary.yml:
   ---
- name: Generate PostgreSQL primary configuration (postgresql.conf)
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "{{ pg_data_dir }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Restart PostgreSQL

- name: Generate PostgreSQL HBA configuration (pg_hba.conf) for primary
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ pg_data_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Reload PostgreSQL

- name: Create replication user
  ansible.builtin.community.general.postgresql_user:
    name: "{{ pg_replication_user }}"
    password: "{{ pg_replication_password }}"
    priv: NOLOGIN
    role_attr_flags: "REPLICATION"
  become_user: postgres
  when: not pg_replication_user_exists.stat.exists # Only create if not exists
  register: pg_replication_user_creation

- name: Check if replication user exists
  ansible.builtin.stat:
    path: "{{ pg_data_dir }}/pg_ident.conf" # A dummy check, better to use postgresql_user module idempotency
  register: pg_replication_user_exists

- name: Restart PostgreSQL primary
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: restarted

 * roles/postgresql_install/tasks/configure_replica.yml:
   ---
- name: Stop PostgreSQL service on replica before base backup
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: stopped

- name: Remove existing data directory on replica for fresh base backup
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    state: absent

- name: Take base backup from primary
  ansible.builtin.command: "pg_basebackup -h {{ pg_primary_ip }} -U {{ pg_replication_user }} -D {{ pg_data_dir }} -F p -Xs stream -P -R"
  become_user: postgres
  args:
    creates: "{{ pg_data_dir }}/postgresql.auto.conf" # Modern approach for replica config

- name: Ensure correct ownership and permissions for data directory
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    owner: postgres
    group: postgres
    mode: '0700'
    recurse: yes

- name: Start PostgreSQL replica service
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: started
    enabled: yes

 * roles/postgresql_install/templates/postgresql.conf.j2 (Simplified example, adjust as needed):
   listen_addresses = '*'
port = {{ pg_port }}
max_connections = 100
shared_buffers = 128MB
wal_level = replica # or hot_standby for older versions
archive_mode = on
archive_command = 'cp %p /var/lib/pgsql/{{ pg_version }}/archive/%f' # Example, consider dedicated WAL archiving
max_wal_senders = 10
wal_keep_size = 2048MB # Adjust based on your WAL generation
hot_standby = on # For replica to be readable

{% if role == "replica" %}
primary_conninfo = 'host={{ pg_primary_ip }} port={{ pg_port }} user={{ pg_replication_user }} password={{ pg_replication_password }}'
primary_slot_name = 'replica_slot' # Recommended for reliable replication
restore_command = 'cp /var/lib/pgsql/{{ pg_version }}/archive/%f %p' # For recovery from archive
{% endif %}

 * roles/postgresql_install/templates/pg_hba.conf.j2 (Simplified example, adjust for security):
   # TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            scram-sha-256
# IPv6 local connections:
host    all             all             ::1/128                 scram-sha-256
# Allow replication connections from replica
host    replication     {{ pg_replication_user }} {{ pg_replica_ip }}/32  scram-sha-256

 * roles/postgresql_install/handlers/main.yml:
   ---
- name: Restart PostgreSQL
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: restarted

- name: Reload PostgreSQL
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: reloaded

2. postgresql_manage Role:
 * roles/postgresql_manage/tasks/backup.yml:
   ---
- name: Create backup directory if it doesn't exist
  ansible.builtin.file:
    path: "/var/lib/pgsql/{{ pg_version }}/backups"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Take full PostgreSQL backup using pg_basebackup
  ansible.builtin.command: "pg_basebackup -h 127.0.0.1 -D /var/lib/pgsql/{{ pg_version }}/backups/full_backup_$(date +%Y%m%d%H%M%S) -F t -z -P -v"
  become_user: postgres
  args:
    creates: "/var/lib/pgsql/{{ pg_version }}/backups/full_backup_$(date +%Y%m%d%H%M%S)" # Simple check for idempotency

- name: Take logical backup of a specific database (example)
  ansible.builtin.command: "pg_dump -h 127.0.0.1 -U postgres your_database_name > /var/lib/pgsql/{{ pg_version }}/backups/your_database_name_$(date +%Y%m%d%H%M%S).sql"
  become_user: postgres
  args:
    creates: "/var/lib/pgsql/{{ pg_version }}/backups/your_database_name_$(date +%Y%m%d%H%M%S).sql" # Simple check for idempotency
  when: backup_type == "logical" # Pass via --extra-vars "backup_type=logical"

 * roles/postgresql_manage/tasks/failover.yml:
   ---
- name: Check if primary is running
  ansible.builtin.shell: "pg_isready -h {{ pg_primary_ip }} -p {{ pg_port }}"
  register: primary_status
  ignore_errors: true
  delegate_to: localhost # Run this check from the Ansible control node

- name: Stop primary if it's running (simulated failure or planned failover)
  ansible.builtin.systemd:
    name: "postgresql-{{ pg_version }}"
    state: stopped
  when: primary_status.rc == 0 and inventory_hostname == hostvars['node1']['inventory_hostname'] # Ensure we only run on primary

- name: Promote replica to primary
  ansible.builtin.command: "pg_ctl promote -D {{ pg_data_dir }}"
  become_user: postgres
  when: inventory_hostname == hostvars['node2']['inventory_hostname'] # Only run on replica
  register: promote_result

- name: Check promotion status
  ansible.builtin.debug:
    var: promote_result

- name: Wait for new primary to start
  ansible.builtin.wait_for:
    port: "{{ pg_port }}"
    host: "{{ hostvars['node2']['ansible_host'] }}"
    delay: 5
    timeout: 120
  when: inventory_hostname == hostvars['node2']['inventory_hostname']

How to Run:
 * Save the files: Create the directory structure and save the inventory.ini, playbook.yml, and the role files.
 * Replace placeholders:
   * your_ssh_user
   * your_primary_ip
   * your_replica_ip
   * your_replication_password (CRITICAL!)
   * your_database_name (for logical backup example)
 * Initial Installation and Configuration:
   ansible-playbook -i inventory.ini playbook.yml

   This will install PostgreSQL, configure the primary and replica, and set up replication.
 * Start/Stop/Reload Services:
   * To start all PostgreSQL services:
     ansible-playbook -i inventory.ini playbook.yml --tags "manage_services" --extra-vars "service_action=start"

   * To stop all PostgreSQL services:
     ansible-playbook -i inventory.ini playbook.yml --tags "manage_services" --extra-vars "service_action=stop"

   * To reload all PostgreSQL services:
     ansible-playbook -i inventory.ini playbook.yml --tags "manage_services" --extra-vars "service_action=reload"

   (Note: For specific node actions, you'd target roles/hosts more granularly or use --limit.)
 * Take Primary Backup:
   * To take a full pg_basebackup:
     ansible-playbook -i inventory.ini playbook.yml --tags "backup_primary" --extra-vars "action=backup"

   * To take a logical backup (e.g., pg_dump):
     ansible-playbook -i inventory.ini playbook.yml --tags "backup_primary" --extra-vars "action=backup backup_type=logical"

 * Stop Primary and Start Replica (Failover):
   ansible-playbook -i inventory.ini playbook.yml --tags "failover" --extra-vars "action=failover"

   This playbook currently assumes a manual trigger for failover. For a production environment, you'd integrate this with a monitoring system or a dedicated failover tool like Patroni or Repmgr.
Important Considerations and Improvements:
 * Security:
   * Passwords: Do NOT hardcode passwords in plain text. Use Ansible Vault for sensitive information.
   * pg_hba.conf: The provided pg_hba.conf is very permissive. Restrict access to only necessary IPs and users.
   * Firewall: Ensure firewalls are configured correctly to only allow necessary traffic.
 * Error Handling: Add more robust error handling and failed_when conditions.
 * Idempotency: Ensure all tasks are idempotent, meaning they can be run multiple times without causing unintended side effects.
 * WAL Archiving: Implement a proper WAL archiving strategy (e.g., to S3, NFS, or a dedicated WAL archive server) for point-in-time recovery and reliable replication. archive_command in postgresql.conf is crucial.
 * Replication Slots: Use replication slots (primary_slot_name) for more robust replication that prevents the primary from removing WAL segments needed by the replica.
 * Monitoring: Integrate with monitoring tools (Prometheus, Grafana, etc.) to track replication lag, primary/replica status, etc.
 * Automated Failover: For true high availability, consider using dedicated tools like:
   * Patroni: A highly advanced and recommended solution for PostgreSQL high availability.
   * Repmgr: Another popular tool for managing PostgreSQL replication and failover.
 * Testing: Thoroughly test your failover and backup procedures in a non-production environment.
 * PostgreSQL Version Specifics: Be aware that certain configurations and commands might differ slightly between PostgreSQL versions.
 * OS Differences: Adjust package names and service management commands if you're using Debian/Ubuntu or other Linux distributions.
 * Dedicated PostgreSQL User: Always perform PostgreSQL operations as the postgres user.
 * Logging: Configure comprehensive PostgreSQL logging to aid in troubleshooting.
 * Performance Tuning: The postgresql.conf parameters are basic. Tune them based on your workload and server resources.
This comprehensive guide should give you a solid foundation for managing PostgreSQL primary and replica nodes with Ansible. Remember to adapt it to your specific needs and security best practices!






This is an excellent way to structure your Ansible project! Using roles makes your playbooks modular, reusable, and much easier to manage, especially as your infrastructure grows.
Here's how we'll refactor the previous playbooks into this new directory structure.
1. Updated Directory Structure
.
├── inventory.ini
├── playbook.yml            # Main playbook to call roles
└── roles/
    ├── postgresql_install/
    │   ├── tasks/
    │   │   ├── main.yml             # Common install & base config for all PG hosts
    │   │   ├── configure_primary.yml  # Primary-specific setup (initdb, users, dbs)
    │   │   └── configure_replica.yml  # Replica-specific setup (pg_basebackup, standby.signal)
    │   ├── templates/
    │   │   ├── pg_hba.conf.j2
    │   │   ├── postgresql.conf.j2
    │   │   └── pgpass.j2              # For pg_basebackup authentication
    │   │   └── (recovery.conf.j2 - optional, for older PG versions)
    │   ├── handlers/
    │   │   └── main.yml
    │   └── vars/
    │       └── main.yml
    └── postgresql_manage/
        ├── tasks/
        │   ├── main.yml             # Start/Stop/Reload/Status tasks
        │   ├── backup.yml           # For logical backups (pg_dumpall) or re-initiating replica
        │   └── failover.yml         # Placeholder for failover logic
        ├── handlers/
        │   └── main.yml
        └── vars/
            └── main.yml

2. File Contents
We'll break down the previous pg-control.yml and pg-backup.yml into these new role files.
inventory.ini (No Change)
# inventory.ini
[postgresql]
Apphost1 role=primary
Apphost2 role=replica

playbook.yml (Main Entry Point)
This is the main playbook that orchestrates the roles. You can choose which roles to run based on tags or variables.
---
- name: PostgreSQL Installation and Management
  hosts: postgresql # Targets both Apphost1 and Apphost2
  become: yes

  vars:
    # Define common variables here, or source from vars/main.yml in roles
    # For simplicity, let's put core vars directly in vars/main.yml of roles
    # or pass them via --extra-vars when running the playbook.

    # Example of a global variable if needed for primary address for replica setup
    primary_db_address: "Apphost1" # Ensure this is accessible by the replica

  roles:
    # Run postgresql_install role first to set up the database systems
    - role: postgresql_install
      tags:
        - install
        - setup
        - primary_setup
        - replica_setup

    # Run postgresql_manage for ongoing operations
    - role: postgresql_manage
      tags:
        - manage
        - control
        - backup
        - failover


roles/postgresql_install/vars/main.yml
# roles/postgresql_install/vars/main.yml
pg_data_dir: "/data/local/arcol/airflow/pgdata"
pg_install_dir: "/efs/dist/postgresql/core/14.10" # Adjust if your installation path differs
database_name: "airflowdb"
replication_user: "replication_user"
airflow_user: "airflow_user"

# Template paths relative to the role's templates/ directory
pg_hba_conf_template: "pg_hba.conf.j2"
postgresql_conf_template: "postgresql.conf.j2"
pgpass_template: "pgpass.j2" # For pg_basebackup

# Action variable to control what tasks are run within this role
# Default to an empty string, or a specific phase like 'base_install'
install_action: "base_install" # Can be 'base_install', 'configure_primary', 'configure_replica'

# These should be retrieved securely (e.g., from Ansible Vault or HashiCorp Vault)
pg_replication_pwd: "{{ lookup('ansible.builtin.hashi_vault', 'secret=field-pg_replication_pwd_devops:value') }}"
pg_airflow_pwd: "{{ lookup('ansible.builtin.hashi_vault', 'secret=field-pg_airflow_pwd_devops:value') }}"

# PostgreSQL service name (adjust for your OS/version)
pg_service_name: postgresql-14

roles/postgresql_install/tasks/main.yml (Common for Primary & Replica)
# roles/postgresql_install/tasks/main.yml
- name: Ensure PostgreSQL data directory exists
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Install PostgreSQL (using apt for Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ pg_service_name }}" # Using the service name variable for consistency
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Install PostgreSQL (using yum for RHEL/CentOS)
  ansible.builtin.yum:
    name: "{{ pg_service_name }}-server" # Adjust package name for yum if different
    state: present
  when: ansible_os_family == "RedHat"

- name: Ensure postgresql service is enabled
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    enabled: yes

- name: Copy postgresql.conf from template
  ansible.builtin.template:
    src: "{{ postgresql_conf_template }}"
    dest: "{{ pg_data_dir }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Reload PostgreSQL

- name: Copy pg_hba.conf from template
  ansible.builtin.template:
    src: "{{ pg_hba_conf_template }}"
    dest: "{{ pg_data_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Reload PostgreSQL

# Include primary/replica specific configuration tasks
- name: Include primary configuration tasks
  ansible.builtin.include_tasks: configure_primary.yml
  when: role == 'primary' and install_action in ['base_install', 'configure_primary']

- name: Include replica configuration tasks
  ansible.builtin.include_tasks: configure_replica.yml
  when: role == 'replica' and install_action in ['base_install', 'configure_replica']

roles/postgresql_install/tasks/configure_primary.yml
# roles/postgresql_install/tasks/configure_primary.yml
- name: Initialize PostgreSQL primary cluster if not already present
  community.general.postgresql_cluster:
    name: main
    cluster_owner: postgres
    data_directory: "{{ pg_data_dir }}"
    port: 5432
    state: present
  become_user: postgres

- name: Start PostgreSQL primary database
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: started

- name: Create PostgreSQL database {{ database_name }}
  community.general.postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ airflow_user }}"
    encoding: "UTF8"
    lc_collate: "en_US.UTF-8"
    lc_ctype: "en_US.UTF-8"
    state: present
  become_user: postgres

- name: Create replication user {{ replication_user }}
  community.general.postgresql_user:
    name: "{{ replication_user }}"
    password: "{{ pg_replication_pwd }}"
    role_attr_flags: REPLICATION,LOGIN
    state: present
  become_user: postgres

- name: Grant all privileges on database to replication user
  community.general.postgresql_privs:
    db: "{{ database_name }}"
    privs: ALL
    type: database
    roles: "{{ replication_user }}"
    state: present
  become_user: postgres

- name: Create Airflow user {{ airflow_user }}
  community.general.postgresql_user:
    name: "{{ airflow_user }}"
    password: "{{ pg_airflow_pwd }}"
    role_attr_flags: LOGIN,PASSWORD
    state: present
  become_user: postgres

- name: Grant all privileges on database to Airflow user
  community.general.postgresql_privs:
    db: "{{ database_name }}"
    privs: ALL
    type: database
    roles: "{{ airflow_user }}"
    state: present
  become_user: postgres

roles/postgresql_install/tasks/configure_replica.yml
# roles/postgresql_install/tasks/configure_replica.yml
- name: Ensure PostgreSQL data directory on replica is clean or empty for base backup
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    state: absent
  # ONLY run this if you are absolutely sure you want to re-initialize a fresh replica.
  # Otherwise, skip this and handle existing data.

- name: Recreate PostgreSQL data directory on replica
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Create .pgpass file for passwordless authentication on replica
  ansible.builtin.template:
    src: "{{ pgpass_template }}"
    dest: "~postgres/.pgpass"
    owner: postgres
    group: postgres
    mode: '0600'
  become_user: postgres

- name: Perform pg_basebackup from primary to replica
  ansible.builtin.command: >
    {{ pg_install_dir }}/bin/pg_basebackup -h {{ primary_db_address }}
    -p 5432 -U {{ replication_user }}
    -X stream -C -D {{ pg_data_dir }} -w
  become_user: postgres
  environment:
    PGDATA: "{{ pg_data_dir }}"
  args:
    creates: "{{ pg_data_dir }}/basebackup.complete" # Make idempotent by checking for a marker file

- name: Create marker file after successful base backup
  ansible.builtin.file:
    path: "{{ pg_data_dir }}/basebackup.complete"
    state: touch
    owner: postgres
    group: postgres
    mode: '0600'
  when: not ansible_check_mode

- name: Create standby.signal file for replica (PostgreSQL 12+)
  ansible.builtin.file:
    path: "{{ pg_data_dir }}/standby.signal"
    state: touch
    owner: postgres
    group: postgres
    mode: '0600'
  # Only needed if pg_basebackup didn't create it or if converting a standalone.
  # pg_basebackup -C usually creates it.

- name: Configure primary_conninfo in postgresql.conf for replica
  ansible.builtin.lineinfile:
    path: "{{ pg_data_dir }}/postgresql.conf"
    regexp: '^#?primary_conninfo =.*'
    line: "primary_conninfo = 'host={{ primary_db_address }} port=5432 user={{ replication_user }} password={{ pg_replication_pwd }}'"
    backup: yes
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Restart PostgreSQL # Restart is usually needed for primary_conninfo changes

- name: Start PostgreSQL replica database
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: started

roles/postgresql_install/templates/pg_hba.conf.j2
# roles/postgresql_install/templates/pg_hba.conf.j2
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            scram-sha-256
# IPv6 local connections:
host    all             all             ::1/128                 scram-sha-256
# Allow replication connections from primary (Apphost1)
host    replication     {{ replication_user }} {{ primary_db_address }}/32 scram-sha-256
# Allow connections from other hosts as needed
host    all             {{ airflow_user }}      0.0.0.0/0               scram-sha-256
host    {{ database_name }}     {{ airflow_user }}      0.0.0.0/0               scram-sha-256

Note: Adjust 0.0.0.0/0 to specific IP ranges for security.
roles/postgresql_install/templates/postgresql.conf.j2
# roles/postgresql_install/templates/postgresql.conf.j2
# (Example, include your standard settings)
data_directory = '{{ pg_data_dir }}'
listen_addresses = '*' # IMPORTANT: Only if you want to connect remotely
port = 5432

# Logging
log_destination = 'stderr'
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_min_duration_statement = 1000 # Log statements that take longer than 1 second

# WAL management for replication (primary specific)
{% if role == 'primary' %}
wal_level = replica
max_wal_senders = 10 # Adjust based on number of replicas + backup tools
max_replication_slots = 5 # Adjust based on number of replicas + backup tools
archive_mode = on
archive_command = 'cp %p /path/to/wal_archive/%f' # Configure your WAL archiving
{% endif %}

# Connection settings
max_connections = 100

# Other settings as needed for your environment

roles/postgresql_install/templates/pgpass.j2
# roles/postgresql_install/templates/pgpass.j2
# host:port:database:user:password
# This file is used by pg_basebackup on the replica to connect to the primary without password prompt.
{{ primary_db_address }}:5432:*:{{ replication_user }}:{{ pg_replication_pwd }}

roles/postgresql_install/handlers/main.yml
# roles/postgresql_install/handlers/main.yml
- name: Reload PostgreSQL
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: reloaded

- name: Restart PostgreSQL
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: restarted

roles/postgresql_manage/vars/main.yml
# roles/postgresql_manage/vars/main.yml
pg_service_name: postgresql-14 # Ensure consistency
pg_data_dir: "/data/local/arcol/airflow/pgdata" # For status checks etc.

# Variable to control specific management actions (e.g., 'start', 'stop', 'backup')
manage_action: "status" # Default action

roles/postgresql_manage/tasks/main.yml (General Management)
# roles/postgresql_manage/tasks/main.yml
- name: Start PostgreSQL database
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: started
  when: manage_action == "start"

- name: Stop PostgreSQL database
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: stopped
  when: manage_action == "stop"

- name: Reload PostgreSQL database configuration
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: reloaded
  when: manage_action == "reload"

- name: Check PostgreSQL database status
  ansible.builtin.command: pg_ctl -D {{ pg_data_dir }} status
  register: pg_status_output
  changed_when: false
  when: manage_action == "status"

- name: Print PostgreSQL status
  ansible.builtin.debug:
    var: pg_status_output.stdout_lines
  when: manage_action == "status"

# Include other management tasks based on action
- name: Include backup tasks
  ansible.builtin.include_tasks: backup.yml
  when: manage_action == "backup"

- name: Include failover tasks
  ansible.builtin.include_tasks: failover.yml
  when: manage_action == "failover" # And potentially other conditions

roles/postgresql_manage/tasks/backup.yml (Example for Logical Backup)
# roles/postgresql_manage/tasks/backup.yml
# This task would typically run on the primary or a dedicated backup server.
- name: Ensure backup directory exists
  ansible.builtin.file:
    path: "/var/backups/postgresql_logical"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: role == 'primary' # Or a dedicated backup server role

- name: Perform pg_dumpall (logical backup)
  ansible.builtin.command: >
    pg_dumpall -U postgres > /var/backups/postgresql_logical/all_databases-{{ ansible_date_time.iso8601_basic }}.sql
  become_user: postgres
  when: role == 'primary'
  args:
    creates: "/var/backups/postgresql_logical/all_databases-{{ ansible_date_time.iso8601_basic }}.sql" # Simple idempotency

# You could also add tasks here for recurring pg_basebackup if needed for new replicas
# or to re-initialize an existing replica. This is distinct from the initial setup
# in configure_replica.yml.

roles/postgresql_manage/tasks/failover.yml (Placeholder)
# roles/postgresql_manage/tasks/failover.yml
- name: Failover Placeholder - Stop primary and promote replica
  ansible.builtin.debug:
    msg: "Failover logic would go here: stop primary, promote replica, reconfigure old primary as new replica."
  when: false # This task won't run unless explicitly enabled and conditions met

roles/postgresql_manage/handlers/main.yml
# roles/postgresql_manage/handlers/main.yml
# Handlers for postgresql_manage role (can reuse from install role or define separately)
- name: Reload PostgreSQL (manage)
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: reloaded

- name: Restart PostgreSQL (manage)
  ansible.builtin.systemd:
    name: "{{ pg_service_name }}"
    state: restarted

How to Run with the New Structure
You will now run the main playbook.yml and control what happens using tags or --extra-vars.
 * Initial Setup (Install PG, configure Primary, configure Replica):
   This is typically a multi-step process. You can run the entire postgresql_install role.
   ansible-playbook -i inventory.ini playbook.yml --tags install --ask-vault-pass

   This will run all tasks within postgresql_install where the when conditions for role and install_action match.
   * main.yml will install and copy base configs on both.
   * configure_primary.yml will run on Apphost1.
   * configure_replica.yml will run on Apphost2.
   Important Sequential Steps for New Primary/Replica Setup:
   It's crucial to ensure the primary is ready before the replica tries to connect. You might prefer to run the playbook in stages:
   * Step 1: Install and configure common files on both.
     ansible-playbook -i inventory.ini playbook.yml --tags install --extra-vars "install_action=base_install" --ask-vault-pass

   * Step 2: Configure the Primary.
     ansible-playbook -i inventory.ini playbook.yml --tags primary_setup --limit Apphost1 --extra-vars "install_action=configure_primary" --ask-vault-pass

   * Step 3: Configure the Replica (Base Backup).
     ansible-playbook -i inventory.ini playbook.yml --tags replica_setup --limit Apphost2 --extra-vars "install_action=configure_replica" --ask-vault-pass

 * General Management (Start/Stop/Reload/Status):
   You'll target the postgresql_manage role.
   * To start PostgreSQL on all hosts:
     ansible-playbook -i inventory.ini playbook.yml --tags manage --extra-vars "manage_action=start"

   * To check status on all hosts:
     ansible-playbook -i inventory.ini playbook.yml --tags manage --extra-vars "manage_action=status"

   * To perform a logical backup on the primary:
     ansible-playbook -i inventory.ini playbook.yml --tags backup --extra-vars "manage_action=backup" --limit Apphost1

This new role-based structure provides a much cleaner and more organized way to manage your PostgreSQL instances with Ansible!

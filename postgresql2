Okay, let's adapt the Ansible code for compatibility with Ansible 2.9.27.
The main changes involve:
 * Module Names: In Ansible 2.9, it was common practice to use shorter module names (e.g., file instead of ansible.builtin.file, postgresql_db instead of community.general.postgresql_db). While FQCNs (Fully Qualified Collection Names) might sometimes work if collections are installed, using the shorter names is more idiomatic for 2.9.
 * collections Keyword: If you're using modules from collections (like community.general for PostgreSQL modules), it's good practice in 2.9 to specify them using the collections keyword in your playbook. This ensures Ansible knows where to find them.
 * Lookup Plugins: Similar to modules, lookup plugins often didn't require the ansible.builtin. prefix in 2.9. For hashi_vault, it's typically provided by the community.hashi_vault collection, so we'll adjust the lookup syntax accordingly.
Here's the updated code:
Directory Structure (No Change)
.
├── inventory.ini
├── playbook.yml
└── roles/
    └── postgresql/
        ├── tasks/
        │   └── main.yml
        ├── templates/
        │   ├── pg_hba.conf.j2
        │   ├── postgresql.conf.j2
        │   └── pgpass.j2
        ├── handlers/
        │   └── main.yml
        └── vars/
            └── main.yml

Consolidated File Contents (Updated for Ansible 2.9.27)
inventory.ini (No Change)
# inventory.ini
[postgresql]
Apphost1 role=primary
Apphost2 role=replica

playbook.yml (Updated with collections keyword)
---
- name: PostgreSQL Installation and Management
  hosts: postgresql
  become: yes

  # Declare the collections needed for PostgreSQL modules and HashiCorp Vault lookup
  collections:
    - community.general
    - community.hashi_vault # Assuming this collection provides the hashi_vault lookup in your 2.9 setup

  roles:
    - role: postgresql
      tags:
        - postgresql_management

roles/postgresql/vars/main.yml (Updated lookup syntax)
# roles/postgresql/vars/main.yml
pg_data_dir: "/data/local/arcol/airflow/pgdata"
pg_install_dir: "/efs/dist/postgresql/core/14.10"
database_name: "airflowdb"
replication_user: "replication_user"
airflow_user: "airflow_user"

pg_hba_conf_template: "pg_hba.conf.j2"
postgresql_conf_template: "postgresql.conf.j2"
pgpass_template: "pgpass.j2"

pg_action: "status"
target_role: "all"

pg_service_name: postgresql-14

# Updated lookup syntax for Ansible 2.9
# This assumes community.hashi_vault collection is installed and active.
pg_replication_pwd: "{{ lookup('hashi_vault', 'secret=field-pg_replication_pwd_devops:value') }}"
pg_airflow_pwd: "{{ lookup('hashi_vault', 'secret=field-pg_airflow_pwd_devops:value') }}"

primary_db_address: "Apphost1"

roles/postgresql/tasks/main.yml (Updated Module Names)
# roles/postgresql/tasks/main.yml
# All PostgreSQL related tasks are combined here.
# Execution is controlled by 'pg_action' and 'target_role' variables.

# --- Common Installation & Base Configuration (pg_action: 'install_base') ---
- name: Ensure PostgreSQL installation directory exists (on EFS share)
  file: # Changed from ansible.builtin.file
    path: "{{ pg_install_dir }}"
    state: directory
  when: pg_action == 'install_base'

- name: Ensure PostgreSQL data directory exists
  file: # Changed from ansible.builtin.file
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: pg_action == 'install_base' or pg_action == 'configure_replica'

- name: Ensure postgresql service is enabled
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    enabled: yes
  when: pg_action == 'install_base'

- name: Copy postgresql.conf from template
  template: # Changed from ansible.builtin.template
    src: "{{ postgresql_conf_template }}"
    dest: "{{ pg_data_dir }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Reload PostgreSQL
  when: pg_action == 'install_base'

- name: Copy pg_hba.conf from template
  template: # Changed from ansible.builtin.template
    src: "{{ pg_hba_conf_template }}"
    dest: "{{ pg_data_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Reload PostgreSQL
  when: pg_action == 'install_base'

# --- Primary-Specific Configuration (pg_action: 'configure_primary') ---
- name: Initialize PostgreSQL primary cluster if not already present
  postgresql_cluster: # Changed from community.general.postgresql_cluster
    name: main
    cluster_owner: postgres
    data_directory: "{{ pg_data_dir }}"
    port: 5432
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

- name: Create PostgreSQL database {{ database_name }} (Primary)
  postgresql_db: # Changed from community.general.postgresql_db
    name: "{{ database_name }}"
    owner: "{{ airflow_user }}"
    encoding: "UTF8"
    lc_collate: "en_US.UTF-8"
    lc_ctype: "en_US.UTF-8"
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

- name: Create replication user {{ replication_user }} (Primary)
  postgresql_user: # Changed from community.general.postgresql_user
    name: "{{ replication_user }}"
    password: "{{ pg_replication_pwd }}"
    role_attr_flags: REPLICATION,LOGIN
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

- name: Grant all privileges on database to replication user (Primary)
  postgresql_privs: # Changed from community.general.postgresql_privs
    db: "{{ database_name }}"
    privs: ALL
    type: database
    roles: "{{ replication_user }}"
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

- name: Create Airflow user {{ airflow_user }} (Primary)
  postgresql_user: # Changed from community.general.postgresql_user
    name: "{{ airflow_user }}"
    password: "{{ pg_airflow_pwd }}"
    role_attr_flags: LOGIN,PASSWORD
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

- name: Grant all privileges on database to Airflow user (Primary)
  postgresql_privs: # Changed from community.general.postgresql_privs
    db: "{{ database_name }}"
    privs: ALL
    type: database
    roles: "{{ airflow_user }}"
    state: present
  become_user: postgres
  when: pg_action == 'configure_primary' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

# --- Replica-Specific Configuration (pg_action: 'configure_replica') ---
- name: Ensure PostgreSQL data directory on replica is clean or empty for base backup
  file: # Changed from ansible.builtin.file
    path: "{{ pg_data_dir }}"
    state: absent
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

- name: Recreate PostgreSQL data directory on replica
  file: # Changed from ansible.builtin.file
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

- name: Create .pgpass file for passwordless authentication on replica
  template: # Changed from ansible.builtin.template
    src: "{{ pgpass_template }}"
    dest: "~postgres/.pgpass"
    owner: postgres
    group: postgres
    mode: '0600'
  become_user: postgres
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

- name: Perform pg_basebackup from primary to replica
  command: > # Changed from ansible.builtin.command
    {{ pg_install_dir }}/bin/pg_basebackup -h {{ primary_db_address }}
    -p 5432 -U {{ replication_user }}
    -X stream -C -D {{ pg_data_dir }} -w
  become_user: postgres
  environment:
    PGDATA: "{{ pg_data_dir }}"
  args:
    creates: "{{ pg_data_dir }}/basebackup.complete"
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

- name: Create marker file after successful base backup
  file: # Changed from ansible.builtin.file
    path: "{{ pg_data_dir }}/basebackup.complete"
    state: touch
    owner: postgres
    group: postgres
    mode: '0600'
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica') and not ansible_check_mode

- name: Create standby.signal file for replica (PostgreSQL 12+)
  file: # Changed from ansible.builtin.file
    path: "{{ pg_data_dir }}/standby.signal"
    state: touch
    owner: postgres
    group: postgres
    mode: '0600'
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

- name: Configure primary_conninfo in postgresql.conf for replica
  lineinfile: # Changed from ansible.builtin.lineinfile
    path: "{{ pg_data_dir }}/postgresql.conf"
    regexp: '^#?primary_conninfo =.*'
    line: "primary_conninfo = 'host={{ primary_db_address }} port=5432 user={{ replication_user }} password={{ pg_replication_pwd }}'"
    backup: yes
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Restart PostgreSQL
  when: pg_action == 'configure_replica' and role == 'replica' and (target_role == 'all' or target_role == 'replica')

# --- General Management Actions (pg_action: 'start', 'stop', 'reload', 'status') ---
- name: Start PostgreSQL database
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    state: started
  when: pg_action == "start" and (target_role == 'all' or role == target_role)

- name: Stop PostgreSQL database
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    state: stopped
  when: pg_action == "stop" and (target_role == 'all' or role == target_role)

- name: Reload PostgreSQL database configuration
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    state: reloaded
  when: pg_action == "reload" and (target_role == 'all' or role == target_role)

- name: Check PostgreSQL database status
  command: "{{ pg_install_dir }}/bin/pg_ctl -D {{ pg_data_dir }} status" # Changed from ansible.builtin.command
  register: pg_status_output
  changed_when: false
  when: pg_action == "status" and (target_role == 'all' or role == target_role)

- name: Print PostgreSQL status
  debug: # Changed from ansible.builtin.debug
    var: pg_status_output.stdout_lines
  when: pg_action == "status" and (target_role == 'all' or role == target_role)

# --- Backup Action (pg_action: 'backup') ---
- name: Perform Logical Backup (pg_dumpall)
  block:
    - name: Ensure backup directory exists
      file: # Changed from ansible.builtin.file
        path: "/var/backups/postgresql_logical"
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Execute pg_dumpall
      command: > # Changed from ansible.builtin.command
        {{ pg_install_dir }}/bin/pg_dumpall -U postgres > /var/backups/postgresql_logical/all_databases-{{ ansible_date_time.iso8601_basic }}.sql
      become_user: postgres
      args:
        creates: "/var/backups/postgresql_logical/all_databases-{{ ansible_date_time.iso8601_basic }}.sql"
  when: pg_action == 'backup' and role == 'primary' and (target_role == 'all' or target_role == 'primary')

# --- Failover Action (pg_action: 'failover') ---
- name: Failover Placeholder - Stop primary and promote replica
  debug: # Changed from ansible.builtin.debug
    msg: "Failover logic would go here: stop current primary, promote replica, reconfigure old primary as new replica."
  when: pg_action == 'failover' and (target_role == 'all' or role == target_role)

roles/postgresql/templates/pg_hba.conf.j2 (No Change)
# roles/postgresql/templates/pg_hba.conf.j2
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            scram-sha-256
# IPv6 local connections:
host    all             all             ::1/128                 scram-sha-256
# Allow replication connections from primary (e.g., {{ primary_db_address }})
host    replication     {{ replication_user }} {{ primary_db_address }}/32 scram-sha-256
# Allow connections from other hosts as needed for airflow_user
host    all             {{ airflow_user }}      0.0.0.0/0               scram-sha-256
host    {{ database_name }}     {{ airflow_user }}      0.0.0.0/0               scram-sha-256

roles/postgresql/templates/postgresql.conf.j2 (No Change)
# roles/postgresql/templates/postgresql.conf.j2
# (Example, include your standard settings)
data_directory = '{{ pg_data_dir }}'
listen_addresses = '*' # IMPORTANT: Only if you want to connect remotely
port = 5432

# Logging
log_destination = 'stderr'
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_min_duration_statement = 1000 # Log statements that take longer than 1 second

# WAL management for replication (primary specific)
{% if role == 'primary' %}
wal_level = replica
max_wal_senders = 10 # Adjust based on number of replicas + backup tools
max_replication_slots = 5 # Adjust based on number of replicas + backup tools
archive_mode = on
archive_command = 'cp %p /path/to/wal_archive/%f' # CONFIGURE YOUR WAL ARCHIVING PATH
{% endif %}

# Connection settings
max_connections = 100

# Other settings as needed for your environment

roles/postgresql/templates/pgpass.j2 (No Change)
# roles/postgresql/templates/pgpass.j2
# host:port:database:user:password
# This file is used by pg_basebackup on the replica to connect to the primary without password prompt.
{{ primary_db_address }}:5432:*:{{ replication_user }}:{{ pg_replication_pwd }}

roles/postgresql/handlers/main.yml (Updated Module Names)
# roles/postgresql/handlers/main.yml
- name: Reload PostgreSQL
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    state: reloaded

- name: Restart PostgreSQL
  systemd: # Changed from ansible.builtin.systemd
    name: "{{ pg_service_name }}"
    state: restarted

